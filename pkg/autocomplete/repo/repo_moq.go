// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repo

import (
	"context"
	"github.com/wejick/bersih/pkg/autocomplete/model"
	"sync"
)

var (
	lockRepoMockCreateProfile sync.RWMutex
	lockRepoMockCreateText    sync.RWMutex
	lockRepoMockDeleteProfile sync.RWMutex
	lockRepoMockDeleteText    sync.RWMutex
	lockRepoMockGetProfile    sync.RWMutex
	lockRepoMockGetText       sync.RWMutex
	lockRepoMockInitialize    sync.RWMutex
	lockRepoMockUpdateProfile sync.RWMutex
	lockRepoMockUpdateText    sync.RWMutex
)

// Ensure, that RepoMock does implement Repo.
// If this is not the case, regenerate this file with moq.
var _ Repo = &RepoMock{}

// RepoMock is a mock implementation of Repo.
//
//     func TestSomethingThatUsesRepo(t *testing.T) {
//
//         // make and configure a mocked Repo
//         mockedRepo := &RepoMock{
//             CreateProfileFunc: func(in1 context.Context, in2 model.Profile) error {
// 	               panic("mock out the CreateProfile method")
//             },
//             CreateTextFunc: func(in1 context.Context, in2 model.Text) error {
// 	               panic("mock out the CreateText method")
//             },
//             DeleteProfileFunc: func(in1 context.Context, in2 model.Profile) error {
// 	               panic("mock out the DeleteProfile method")
//             },
//             DeleteTextFunc: func(in1 context.Context, in2 model.Text) error {
// 	               panic("mock out the DeleteText method")
//             },
//             GetProfileFunc: func(in1 context.Context) (ProfileList, error) {
// 	               panic("mock out the GetProfile method")
//             },
//             GetTextFunc: func(in1 context.Context) (TextList, error) {
// 	               panic("mock out the GetText method")
//             },
//             InitializeFunc: func() error {
// 	               panic("mock out the Initialize method")
//             },
//             UpdateProfileFunc: func(in1 context.Context, in2 model.Profile) error {
// 	               panic("mock out the UpdateProfile method")
//             },
//             UpdateTextFunc: func(in1 context.Context, in2 model.Text) error {
// 	               panic("mock out the UpdateText method")
//             },
//         }
//
//         // use mockedRepo in code that requires Repo
//         // and then make assertions.
//
//     }
type RepoMock struct {
	// CreateProfileFunc mocks the CreateProfile method.
	CreateProfileFunc func(in1 context.Context, in2 model.Profile) error

	// CreateTextFunc mocks the CreateText method.
	CreateTextFunc func(in1 context.Context, in2 model.Text) error

	// DeleteProfileFunc mocks the DeleteProfile method.
	DeleteProfileFunc func(in1 context.Context, in2 model.Profile) error

	// DeleteTextFunc mocks the DeleteText method.
	DeleteTextFunc func(in1 context.Context, in2 model.Text) error

	// GetProfileFunc mocks the GetProfile method.
	GetProfileFunc func(in1 context.Context) (ProfileList, error)

	// GetTextFunc mocks the GetText method.
	GetTextFunc func(in1 context.Context) (TextList, error)

	// InitializeFunc mocks the Initialize method.
	InitializeFunc func() error

	// UpdateProfileFunc mocks the UpdateProfile method.
	UpdateProfileFunc func(in1 context.Context, in2 model.Profile) error

	// UpdateTextFunc mocks the UpdateText method.
	UpdateTextFunc func(in1 context.Context, in2 model.Text) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateProfile holds details about calls to the CreateProfile method.
		CreateProfile []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 model.Profile
		}
		// CreateText holds details about calls to the CreateText method.
		CreateText []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 model.Text
		}
		// DeleteProfile holds details about calls to the DeleteProfile method.
		DeleteProfile []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 model.Profile
		}
		// DeleteText holds details about calls to the DeleteText method.
		DeleteText []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 model.Text
		}
		// GetProfile holds details about calls to the GetProfile method.
		GetProfile []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// GetText holds details about calls to the GetText method.
		GetText []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// Initialize holds details about calls to the Initialize method.
		Initialize []struct {
		}
		// UpdateProfile holds details about calls to the UpdateProfile method.
		UpdateProfile []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 model.Profile
		}
		// UpdateText holds details about calls to the UpdateText method.
		UpdateText []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 model.Text
		}
	}
}

// CreateProfile calls CreateProfileFunc.
func (mock *RepoMock) CreateProfile(in1 context.Context, in2 model.Profile) error {
	if mock.CreateProfileFunc == nil {
		panic("RepoMock.CreateProfileFunc: method is nil but Repo.CreateProfile was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 model.Profile
	}{
		In1: in1,
		In2: in2,
	}
	lockRepoMockCreateProfile.Lock()
	mock.calls.CreateProfile = append(mock.calls.CreateProfile, callInfo)
	lockRepoMockCreateProfile.Unlock()
	return mock.CreateProfileFunc(in1, in2)
}

// CreateProfileCalls gets all the calls that were made to CreateProfile.
// Check the length with:
//     len(mockedRepo.CreateProfileCalls())
func (mock *RepoMock) CreateProfileCalls() []struct {
	In1 context.Context
	In2 model.Profile
} {
	var calls []struct {
		In1 context.Context
		In2 model.Profile
	}
	lockRepoMockCreateProfile.RLock()
	calls = mock.calls.CreateProfile
	lockRepoMockCreateProfile.RUnlock()
	return calls
}

// CreateText calls CreateTextFunc.
func (mock *RepoMock) CreateText(in1 context.Context, in2 model.Text) error {
	if mock.CreateTextFunc == nil {
		panic("RepoMock.CreateTextFunc: method is nil but Repo.CreateText was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 model.Text
	}{
		In1: in1,
		In2: in2,
	}
	lockRepoMockCreateText.Lock()
	mock.calls.CreateText = append(mock.calls.CreateText, callInfo)
	lockRepoMockCreateText.Unlock()
	return mock.CreateTextFunc(in1, in2)
}

// CreateTextCalls gets all the calls that were made to CreateText.
// Check the length with:
//     len(mockedRepo.CreateTextCalls())
func (mock *RepoMock) CreateTextCalls() []struct {
	In1 context.Context
	In2 model.Text
} {
	var calls []struct {
		In1 context.Context
		In2 model.Text
	}
	lockRepoMockCreateText.RLock()
	calls = mock.calls.CreateText
	lockRepoMockCreateText.RUnlock()
	return calls
}

// DeleteProfile calls DeleteProfileFunc.
func (mock *RepoMock) DeleteProfile(in1 context.Context, in2 model.Profile) error {
	if mock.DeleteProfileFunc == nil {
		panic("RepoMock.DeleteProfileFunc: method is nil but Repo.DeleteProfile was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 model.Profile
	}{
		In1: in1,
		In2: in2,
	}
	lockRepoMockDeleteProfile.Lock()
	mock.calls.DeleteProfile = append(mock.calls.DeleteProfile, callInfo)
	lockRepoMockDeleteProfile.Unlock()
	return mock.DeleteProfileFunc(in1, in2)
}

// DeleteProfileCalls gets all the calls that were made to DeleteProfile.
// Check the length with:
//     len(mockedRepo.DeleteProfileCalls())
func (mock *RepoMock) DeleteProfileCalls() []struct {
	In1 context.Context
	In2 model.Profile
} {
	var calls []struct {
		In1 context.Context
		In2 model.Profile
	}
	lockRepoMockDeleteProfile.RLock()
	calls = mock.calls.DeleteProfile
	lockRepoMockDeleteProfile.RUnlock()
	return calls
}

// DeleteText calls DeleteTextFunc.
func (mock *RepoMock) DeleteText(in1 context.Context, in2 model.Text) error {
	if mock.DeleteTextFunc == nil {
		panic("RepoMock.DeleteTextFunc: method is nil but Repo.DeleteText was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 model.Text
	}{
		In1: in1,
		In2: in2,
	}
	lockRepoMockDeleteText.Lock()
	mock.calls.DeleteText = append(mock.calls.DeleteText, callInfo)
	lockRepoMockDeleteText.Unlock()
	return mock.DeleteTextFunc(in1, in2)
}

// DeleteTextCalls gets all the calls that were made to DeleteText.
// Check the length with:
//     len(mockedRepo.DeleteTextCalls())
func (mock *RepoMock) DeleteTextCalls() []struct {
	In1 context.Context
	In2 model.Text
} {
	var calls []struct {
		In1 context.Context
		In2 model.Text
	}
	lockRepoMockDeleteText.RLock()
	calls = mock.calls.DeleteText
	lockRepoMockDeleteText.RUnlock()
	return calls
}

// GetProfile calls GetProfileFunc.
func (mock *RepoMock) GetProfile(in1 context.Context) (ProfileList, error) {
	if mock.GetProfileFunc == nil {
		panic("RepoMock.GetProfileFunc: method is nil but Repo.GetProfile was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	lockRepoMockGetProfile.Lock()
	mock.calls.GetProfile = append(mock.calls.GetProfile, callInfo)
	lockRepoMockGetProfile.Unlock()
	return mock.GetProfileFunc(in1)
}

// GetProfileCalls gets all the calls that were made to GetProfile.
// Check the length with:
//     len(mockedRepo.GetProfileCalls())
func (mock *RepoMock) GetProfileCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	lockRepoMockGetProfile.RLock()
	calls = mock.calls.GetProfile
	lockRepoMockGetProfile.RUnlock()
	return calls
}

// GetText calls GetTextFunc.
func (mock *RepoMock) GetText(in1 context.Context) (TextList, error) {
	if mock.GetTextFunc == nil {
		panic("RepoMock.GetTextFunc: method is nil but Repo.GetText was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	lockRepoMockGetText.Lock()
	mock.calls.GetText = append(mock.calls.GetText, callInfo)
	lockRepoMockGetText.Unlock()
	return mock.GetTextFunc(in1)
}

// GetTextCalls gets all the calls that were made to GetText.
// Check the length with:
//     len(mockedRepo.GetTextCalls())
func (mock *RepoMock) GetTextCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	lockRepoMockGetText.RLock()
	calls = mock.calls.GetText
	lockRepoMockGetText.RUnlock()
	return calls
}

// Initialize calls InitializeFunc.
func (mock *RepoMock) Initialize() error {
	if mock.InitializeFunc == nil {
		panic("RepoMock.InitializeFunc: method is nil but Repo.Initialize was just called")
	}
	callInfo := struct {
	}{}
	lockRepoMockInitialize.Lock()
	mock.calls.Initialize = append(mock.calls.Initialize, callInfo)
	lockRepoMockInitialize.Unlock()
	return mock.InitializeFunc()
}

// InitializeCalls gets all the calls that were made to Initialize.
// Check the length with:
//     len(mockedRepo.InitializeCalls())
func (mock *RepoMock) InitializeCalls() []struct {
} {
	var calls []struct {
	}
	lockRepoMockInitialize.RLock()
	calls = mock.calls.Initialize
	lockRepoMockInitialize.RUnlock()
	return calls
}

// UpdateProfile calls UpdateProfileFunc.
func (mock *RepoMock) UpdateProfile(in1 context.Context, in2 model.Profile) error {
	if mock.UpdateProfileFunc == nil {
		panic("RepoMock.UpdateProfileFunc: method is nil but Repo.UpdateProfile was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 model.Profile
	}{
		In1: in1,
		In2: in2,
	}
	lockRepoMockUpdateProfile.Lock()
	mock.calls.UpdateProfile = append(mock.calls.UpdateProfile, callInfo)
	lockRepoMockUpdateProfile.Unlock()
	return mock.UpdateProfileFunc(in1, in2)
}

// UpdateProfileCalls gets all the calls that were made to UpdateProfile.
// Check the length with:
//     len(mockedRepo.UpdateProfileCalls())
func (mock *RepoMock) UpdateProfileCalls() []struct {
	In1 context.Context
	In2 model.Profile
} {
	var calls []struct {
		In1 context.Context
		In2 model.Profile
	}
	lockRepoMockUpdateProfile.RLock()
	calls = mock.calls.UpdateProfile
	lockRepoMockUpdateProfile.RUnlock()
	return calls
}

// UpdateText calls UpdateTextFunc.
func (mock *RepoMock) UpdateText(in1 context.Context, in2 model.Text) error {
	if mock.UpdateTextFunc == nil {
		panic("RepoMock.UpdateTextFunc: method is nil but Repo.UpdateText was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 model.Text
	}{
		In1: in1,
		In2: in2,
	}
	lockRepoMockUpdateText.Lock()
	mock.calls.UpdateText = append(mock.calls.UpdateText, callInfo)
	lockRepoMockUpdateText.Unlock()
	return mock.UpdateTextFunc(in1, in2)
}

// UpdateTextCalls gets all the calls that were made to UpdateText.
// Check the length with:
//     len(mockedRepo.UpdateTextCalls())
func (mock *RepoMock) UpdateTextCalls() []struct {
	In1 context.Context
	In2 model.Text
} {
	var calls []struct {
		In1 context.Context
		In2 model.Text
	}
	lockRepoMockUpdateText.RLock()
	calls = mock.calls.UpdateText
	lockRepoMockUpdateText.RUnlock()
	return calls
}
